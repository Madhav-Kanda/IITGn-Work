# -*- coding: utf-8 -*-
"""Q7_forecast.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QygJyzTuf4wJ3ioxCqF0boFIbPNbBJd6
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.models import Sequential
dataset = pd.read_csv('MinimumDailyTemperaturesDataset.csv')
# plt.plot(data['Date'],data['Temp'])
# plt.show()

#TODO : Write here

past_days = 30

# define the number of days to predict in advance
k = 5

# load the temperature data
data = dataset['Temp']

# create input and output sequences
X = []
y = []
for i in range(len(data)-(past_days+k)):
    X.append(data[i:i+past_days])
    y.append(data[i+past_days:i+past_days+k])
X = np.array(X)
y = np.array(y)

# reshape the input and output sequences for the LSTM layer
X = X.reshape(X.shape[0], X.shape[1], 1)

# define the model architecture
model = Sequential()
model.add(LSTM(64, input_shape=(past_days, 1)))
model.add(Dense(k))

# compile the model
model.compile(optimizer='adam', loss='mse')

# train the model
model.fit(X, y, epochs=20)

# generate a prediction for the temperature k days in the future based on the last past_days days of temperature data
last_past_days = data[-past_days-k:-k]
last_past_days = last_past_days.values.reshape(1, past_days, 1)
prediction = model.predict(last_past_days)[0]
true_values = data[-k:]
print("MSE error is: ", np.mean((prediction-true_values)**2))
print("Predicted temperature for", k, "days in the future:")
plt.plot(dataset['Date'][-k:], prediction, label = 'Predicted')
plt.plot(dataset['Date'][-k:], true_values, label = 'True')
plt.legend()
plt.show()
# print(prediction)
# print(true_values)

predictions = []
for i in range(past_days, len(data)):
    x = data[i-past_days:i]
    x = x.values.reshape(1, past_days, 1)
    prediction = model.predict(x)[0][0]
    predictions.append(prediction)
# print(predictions)
plt.plot(dataset['Date'][past_days:], predictions, label = 'Predicted', alpha = 0.8)
plt.plot(dataset['Date'][past_days:], dataset['Temp'][past_days:], label = 'True', alpha = 0.3)
plt.legend()
plt.show()